{
  "contractName": "ERC165Upgradeable",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xf2788e700c57c7bcb7979a1d3466fc1f38f4d0778a772b3dafcf56db7c5cd9d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://538c0d9285872b7849b2c721800d6c9ba20ea3fce2d5de6a89402c6289233580\",\"dweb:/ipfs/QmPMJSvz1XwaPEAYtzxPBPDbFuqk3Wyo8N2RRzQcTubJko\"]},\"project:/contracts/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0x9c08e9acd9230f3992a4990e06d2fea54f6ada24405113580d3a8762a98dc2b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://984dee4bf32e571d8ba2fb5526e2fd86d57e28219a73736dd1f4164f4fb4ef28\",\"dweb:/ipfs/QmZHXDT72VwogeEyCB6UuCcqyGuSLLoD7rJizA8dA33NCh\"]},\"project:/contracts/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0x1df424d47ee189ade865159e8c4630f06dcd67d2115ce6ab1a06b2de942004e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4d15d509483d66860b07c5e41648846d707e3e683ccd637dc1aba8213ed5561\",\"dweb:/ipfs/QmUwGPD1Qx7AGLBcNFPZgSN21NGtsyzSuiBCHJCuwXvgx1\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC165Upgradeable.sol\";\r\nimport \"../../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\r\n    function __ERC165_init() internal initializer {\r\n        __ERC165_init_unchained();\r\n    }\r\n\r\n    function __ERC165_init_unchained() internal initializer {\r\n    }\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n",
  "sourcePath": "C:\\CryptoIsland\\contracts\\@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol",
  "ast": {
    "absolutePath": "project:/contracts/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol",
    "exportedSymbols": {
      "ERC165Upgradeable": [
        2513
      ],
      "IERC165Upgradeable": [
        2525
      ],
      "Initializable": [
        170
      ]
    },
    "id": 2514,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2469,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:23:15"
      },
      {
        "absolutePath": "project:/contracts/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol",
        "file": "./IERC165Upgradeable.sol",
        "id": 2470,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2514,
        "sourceUnit": 2526,
        "src": "62:34:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
        "file": "../../proxy/utils/Initializable.sol",
        "id": 2471,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2514,
        "sourceUnit": 171,
        "src": "98:45:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 2473,
              "name": "Initializable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 170,
              "src": "777:13:15"
            },
            "id": 2474,
            "nodeType": "InheritanceSpecifier",
            "src": "777:13:15"
          },
          {
            "baseName": {
              "id": 2475,
              "name": "IERC165Upgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2525,
              "src": "792:18:15"
            },
            "id": 2476,
            "nodeType": "InheritanceSpecifier",
            "src": "792:18:15"
          }
        ],
        "contractDependencies": [
          170,
          2525
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 2472,
          "nodeType": "StructuredDocumentation",
          "src": "147:589:15",
          "text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
        },
        "fullyImplemented": true,
        "id": 2513,
        "linearizedBaseContracts": [
          2513,
          2525,
          170
        ],
        "name": "ERC165Upgradeable",
        "nameLocation": "756:17:15",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2484,
              "nodeType": "Block",
              "src": "864:44:15",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 2481,
                      "name": "__ERC165_init_unchained",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2491,
                      "src": "875:23:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 2482,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "875:25:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2483,
                  "nodeType": "ExpressionStatement",
                  "src": "875:25:15"
                }
              ]
            },
            "id": 2485,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 2479,
                "modifierName": {
                  "id": 2478,
                  "name": "initializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 169,
                  "src": "852:11:15"
                },
                "nodeType": "ModifierInvocation",
                "src": "852:11:15"
              }
            ],
            "name": "__ERC165_init",
            "nameLocation": "827:13:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2477,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "840:2:15"
            },
            "returnParameters": {
              "id": 2480,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "864:0:15"
            },
            "scope": 2513,
            "src": "818:90:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2490,
              "nodeType": "Block",
              "src": "972:8:15",
              "statements": []
            },
            "id": 2491,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 2488,
                "modifierName": {
                  "id": 2487,
                  "name": "initializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 169,
                  "src": "960:11:15"
                },
                "nodeType": "ModifierInvocation",
                "src": "960:11:15"
              }
            ],
            "name": "__ERC165_init_unchained",
            "nameLocation": "925:23:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2486,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "948:2:15"
            },
            "returnParameters": {
              "id": 2489,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "972:0:15"
            },
            "scope": 2513,
            "src": "916:64:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              2524
            ],
            "body": {
              "id": 2507,
              "nodeType": "Block",
              "src": "1141:77:15",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    },
                    "id": 2505,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2500,
                      "name": "interfaceId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2494,
                      "src": "1159:11:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "arguments": [
                          {
                            "id": 2502,
                            "name": "IERC165Upgradeable",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2525,
                            "src": "1179:18:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IERC165Upgradeable_$2525_$",
                              "typeString": "type(contract IERC165Upgradeable)"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_type$_t_contract$_IERC165Upgradeable_$2525_$",
                              "typeString": "type(contract IERC165Upgradeable)"
                            }
                          ],
                          "id": 2501,
                          "name": "type",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967269,
                          "src": "1174:4:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                            "typeString": "function () pure"
                          }
                        },
                        "id": 2503,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1174:24:15",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_meta_type_t_contract$_IERC165Upgradeable_$2525",
                          "typeString": "type(contract IERC165Upgradeable)"
                        }
                      },
                      "id": 2504,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "interfaceId",
                      "nodeType": "MemberAccess",
                      "src": "1174:36:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "src": "1159:51:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 2499,
                  "id": 2506,
                  "nodeType": "Return",
                  "src": "1152:58:15"
                }
              ]
            },
            "documentation": {
              "id": 2492,
              "nodeType": "StructuredDocumentation",
              "src": "986:58:15",
              "text": " @dev See {IERC165-supportsInterface}."
            },
            "functionSelector": "01ffc9a7",
            "id": 2508,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "1059:17:15",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 2496,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1117:8:15"
            },
            "parameters": {
              "id": 2495,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2494,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "1084:11:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 2508,
                  "src": "1077:18:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 2493,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1077:6:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1076:20:15"
            },
            "returnParameters": {
              "id": 2499,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2498,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2508,
                  "src": "1135:4:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2497,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1135:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1134:6:15"
            },
            "scope": 2513,
            "src": "1050:168:15",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 2512,
            "mutability": "mutable",
            "name": "__gap",
            "nameLocation": "1244:5:15",
            "nodeType": "VariableDeclaration",
            "scope": 2513,
            "src": "1224:25:15",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 2509,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1224:7:15",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 2511,
              "length": {
                "hexValue": "3530",
                "id": 2510,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1232:2:15",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_50_by_1",
                  "typeString": "int_const 50"
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "1224:11:15",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "visibility": "private"
          }
        ],
        "scope": 2514,
        "src": "738:515:15"
      }
    ],
    "src": "35:1220:15"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.2+commit.661d1103.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.8",
  "updatedAt": "2022-08-08T05:12:03.595Z",
  "devdoc": {
    "details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}